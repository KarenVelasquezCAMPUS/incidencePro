// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(ApiIncidenceProContext))]
    [Migration("20230905114609_update")]
    partial class Update
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("Domain.Entities.AreaUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<int>("IdAreaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdUserFk")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("UserId");

                    b.ToTable("AreaUsers");
                });

            modelBuilder.Entity("Domain.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ContactCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("ContactTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int?>("DocTypeId")
                        .HasColumnType("int");

                    b.Property<int>("IdContactCategoryFk")
                        .HasColumnType("int");

                    b.Property<int>("IdContactTypeFk")
                        .HasColumnType("int");

                    b.Property<int>("IdUserFk")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ContactCategoryId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Domain.Entities.ContactCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ContactCategories");
                });

            modelBuilder.Entity("Domain.Entities.ContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("ContactTypes");
                });

            modelBuilder.Entity("Domain.Entities.DocType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("DocTypes");
                });

            modelBuilder.Entity("Domain.Entities.Incidence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("IdAreaFk")
                        .HasColumnType("int");

                    b.Property<int>("IdPlaceFk")
                        .HasColumnType("int");

                    b.Property<int>("IdStateFk")
                        .HasColumnType("int");

                    b.Property<int>("IdUserFk")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("StateId");

                    b.HasIndex("UserId");

                    b.ToTable("Incidences");
                });

            modelBuilder.Entity("Domain.Entities.IncidenceDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("IdIncidenceLevelFk")
                        .HasColumnType("int");

                    b.Property<int>("IdIncidenceTypeFk")
                        .HasColumnType("int");

                    b.Property<int>("IdStateFk")
                        .HasColumnType("int");

                    b.Property<int>("IdWorkToolFk")
                        .HasColumnType("int");

                    b.Property<int?>("IncidenceId")
                        .HasColumnType("int");

                    b.Property<int?>("IncidenceLevelId")
                        .HasColumnType("int");

                    b.Property<int?>("IncidenceTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("WorkToolId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IncidenceId");

                    b.HasIndex("IncidenceLevelId");

                    b.HasIndex("IncidenceTypeId");

                    b.HasIndex("StateId");

                    b.HasIndex("WorkToolId");

                    b.ToTable("IncidenceDetails");
                });

            modelBuilder.Entity("Domain.Entities.IncidenceLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("IncidenceLevels");
                });

            modelBuilder.Entity("Domain.Entities.IncidenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("IncidenceTypes");
                });

            modelBuilder.Entity("Domain.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AreaId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("IdAreaFk")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<int?>("DocTypeId")
                        .HasColumnType("int");

                    b.Property<int>("IdDocTypeFk")
                        .HasColumnType("int");

                    b.Property<int>("IdRoleFk")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocTypeId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.WorkTool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("WorkTools");
                });

            modelBuilder.Entity("Domain.Entities.AreaUser", b =>
                {
                    b.HasOne("Domain.Entities.Area", "Area")
                        .WithMany("AreaUsers")
                        .HasForeignKey("AreaId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("AreaUsers")
                        .HasForeignKey("UserId");

                    b.Navigation("Area");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Contact", b =>
                {
                    b.HasOne("Domain.Entities.ContactCategory", "ContactCategory")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactCategoryId");

                    b.HasOne("Domain.Entities.ContactType", "ContactType")
                        .WithMany("Contacts")
                        .HasForeignKey("ContactTypeId");

                    b.HasOne("Domain.Entities.DocType", null)
                        .WithMany("Contacts")
                        .HasForeignKey("DocTypeId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId");

                    b.Navigation("ContactCategory");

                    b.Navigation("ContactType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Incidence", b =>
                {
                    b.HasOne("Domain.Entities.Area", "Area")
                        .WithMany("Incidences")
                        .HasForeignKey("AreaId");

                    b.HasOne("Domain.Entities.Place", "Place")
                        .WithMany("Incidences")
                        .HasForeignKey("PlaceId");

                    b.HasOne("Domain.Entities.State", "State")
                        .WithMany("Incidences")
                        .HasForeignKey("StateId");

                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Incidences")
                        .HasForeignKey("UserId");

                    b.Navigation("Area");

                    b.Navigation("Place");

                    b.Navigation("State");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.IncidenceDetail", b =>
                {
                    b.HasOne("Domain.Entities.Incidence", null)
                        .WithMany("IncidenceDetails")
                        .HasForeignKey("IncidenceId");

                    b.HasOne("Domain.Entities.IncidenceLevel", "IncidenceLevel")
                        .WithMany("IncidenceDetails")
                        .HasForeignKey("IncidenceLevelId");

                    b.HasOne("Domain.Entities.IncidenceType", "IncidenceType")
                        .WithMany("IncidenceDetails")
                        .HasForeignKey("IncidenceTypeId");

                    b.HasOne("Domain.Entities.State", "State")
                        .WithMany("IncidenceDetails")
                        .HasForeignKey("StateId");

                    b.HasOne("Domain.Entities.WorkTool", "WorkTool")
                        .WithMany("IncidenceDetails")
                        .HasForeignKey("WorkToolId");

                    b.Navigation("IncidenceLevel");

                    b.Navigation("IncidenceType");

                    b.Navigation("State");

                    b.Navigation("WorkTool");
                });

            modelBuilder.Entity("Domain.Entities.Place", b =>
                {
                    b.HasOne("Domain.Entities.Area", "Area")
                        .WithMany("Places")
                        .HasForeignKey("AreaId");

                    b.Navigation("Area");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.DocType", "DocType")
                        .WithMany("Users")
                        .HasForeignKey("DocTypeId");

                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId");

                    b.Navigation("DocType");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Area", b =>
                {
                    b.Navigation("AreaUsers");

                    b.Navigation("Incidences");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("Domain.Entities.ContactCategory", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Entities.ContactType", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("Domain.Entities.DocType", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.Incidence", b =>
                {
                    b.Navigation("IncidenceDetails");
                });

            modelBuilder.Entity("Domain.Entities.IncidenceLevel", b =>
                {
                    b.Navigation("IncidenceDetails");
                });

            modelBuilder.Entity("Domain.Entities.IncidenceType", b =>
                {
                    b.Navigation("IncidenceDetails");
                });

            modelBuilder.Entity("Domain.Entities.Place", b =>
                {
                    b.Navigation("Incidences");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Navigation("IncidenceDetails");

                    b.Navigation("Incidences");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("AreaUsers");

                    b.Navigation("Contacts");

                    b.Navigation("Incidences");
                });

            modelBuilder.Entity("Domain.Entities.WorkTool", b =>
                {
                    b.Navigation("IncidenceDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
